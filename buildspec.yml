version: 0.2

env:
  parameter-store:
    DOCKER_USERNAME: "/streamlit/docker-credentials/username"
    DOCKER_PASSWORD: "/streamlit/docker-credentials/password"
  variables:
    DOCKER_HUB_REPO: "divijeshhub/pikube"

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo Installing dependencies...
      - pip install --upgrade pip
      - pip install -r requirements.txt

  pre_build:
    commands:
      - echo "Fetching branch name from CodeBuild environment variables..."

      # First, check if CODEBUILD_WEBHOOK_HEAD_REF exists (for webhook-triggered builds)
      - |
        if [ -n "$CODEBUILD_WEBHOOK_HEAD_REF" ]; then
          export BRANCH_NAME=$(echo $CODEBUILD_WEBHOOK_HEAD_REF | sed 's|refs/heads/||')
          echo "Branch name (from CODEBUILD_WEBHOOK_HEAD_REF) is $BRANCH_NAME"
        else
          # Fallback to CODEBUILD_SOURCE_VERSION (if the webhook ref is not set)
          export BRANCH_NAME=$(echo $CODEBUILD_SOURCE_VERSION | sed 's|refs/heads/||')
          echo "Branch name (from CODEBUILD_SOURCE_VERSION) is $BRANCH_NAME"
        fi

      # If branch name is empty or HEAD, fallback to git
      - |
        if [ -z "$BRANCH_NAME" ] || [ "$BRANCH_NAME" == "HEAD" ]; then
          echo "Branch name is empty or HEAD. Falling back to git..."
          # Use git to extract the branch name from the local repo
          export BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "Branch name (from git) is $BRANCH_NAME"
        fi

      # Docker Login
      - echo "Logging into Docker Hub..."
      - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - echo "Docker login successful"

      # Set Docker tag and deployment name
      - export DOCKER_TAG="${BRANCH_NAME//[^a-zA-Z0-9_-]/_}-v1"  # Replace invalid characters with underscore (_)
      - export DEPLOYMENT_NAME="${BRANCH_NAME//[^a-zA-Z0-9_-]/_}-container"  # Ensure valid characters in deployment name

      - echo "Docker Tag $DOCKER_TAG, Deployment Name $DEPLOYMENT_NAME"

      - echo "Building Docker image with tag $DOCKER_TAG..."
      - docker build -t $DOCKER_HUB_REPO:$DOCKER_TAG .

      # Set execute permissions on all scripts
      - echo "Setting execute permissions on all scripts..."
      - chmod +x before_install.sh
      - chmod +x after_install.sh
      - chmod +x application_start.sh
      - chmod +x application_stop.sh
      - chmod +x validate_service.sh

  post_build:
    commands:
      - echo "Pushing Docker image to DockerHub..."
      - docker push $DOCKER_HUB_REPO:$DOCKER_TAG

      # Save DOCKER_TAG and DEPLOYMENT_NAME to a file for use during deployment
      - echo "DOCKER_TAG=$DOCKER_TAG" > deployment_variables.txt
      - echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> deployment_variables.txt
      - echo "DOCKER_HUB_REPO=$DOCKER_HUB_REPO" >> deployment_variables.txt

artifacts:
  files:
    - appspec.yml
    - application_stop.sh
    - after_install.sh
    - before_install.sh
    - application_start.sh
    - validate_service.sh
    - Dockerfile
    - requirements.txt
    - ui.py
    - deployment_variables.txt  # Include the deployment_variables.txt file containing DOCKER_TAG and DEPLOYMENT_NAME

cache:
  paths:
    - '/root/.cache/pip/**/*'

